{"version":3,"file":"static/js/264.d0d1b033.chunk.js","mappings":"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","sources":["components/services/moviesApi.ts","pages/MovieDetails/MovieDetails.styled.tsx","pages/MovieDetails/MovieDetails.tsx"],"sourcesContent":["import axios from 'axios';\nimport toast from 'react-hot-toast';\n\n// #API_KEY = 'd03712107dcdd723f1173c5ee2c0d8c1';\n\nconst agent = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: { api_key: 'd03712107dcdd723f1173c5ee2c0d8c1' },\n});\n\nclass MovieAPI {\n  public async getTrendingMovies() {\n    try {\n      const movies = await agent.get('trending/movie/day', {\n        params: {\n          language: 'en-US',\n        },\n      });\n      if (movies.status === 204) {\n        throw new Error('no movies');\n      }\n      return movies?.data?.results;\n    } catch (error) {\n      toast.error('Something went wrong ðŸ˜¥!');\n      console.error(error);\n    }\n  }\n\n  public async getMoviesByQuery(query: string, controller: AbortController) {\n    try {\n      const movies = await agent.get('search/movie', {\n        params: {\n          query,\n          signal: controller.signal,\n        },\n      });\n\n      return movies?.data?.results;\n    } catch (error) {\n      toast.error('Something went wrong ðŸ˜¥!');\n      console.error(error);\n    }\n  }\n\n  public async getMoviesDetailsById(id: string, controller: AbortController) {\n    try {\n      const movie = await agent.get(`movie/${id}`, {\n        params: {\n          signal: controller.signal,\n        },\n      });\n\n      return movie?.data;\n    } catch (error) {\n      toast.error('Something went wrong ðŸ˜¥!');\n      console.error(error);\n    }\n  }\n\n  public async getMovieCast(id: string, controller: AbortController) {\n    try {\n      const actors = await agent.get(`movie/${id}/credits`, {\n        params: {\n          signal: controller.signal,\n        },\n      });\n\n      return actors?.data?.cast;\n    } catch (error) {\n      toast.error('Something went wrong ðŸ˜¥!');\n      console.error(error);\n    }\n  }\n\n  public async getMovieReviews(id: string, controller: AbortController) {\n    try {\n      const reviews = await agent.get(`movie/${id}/reviews`, {\n        params: {\n          signal: controller.signal,\n        },\n      });\n\n      return reviews?.data?.results;\n    } catch (error) {\n      toast.error('Something went wrong ðŸ˜¥!');\n      console.error(error);\n    }\n  }\n}\n\nconst movieAPI = new MovieAPI();\n\nexport { movieAPI };\n","import { NavLink } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const ImgWrapper = styled.div`\n  min-width: 400px;\n  border-radius: 10px;\n  overflow: hidden;\n  position: relative;\n\n  > img {\n    object-fit: cover;\n  }\n`;\n\nexport const InfoWrapper = styled.div`\n  padding-top: 10px;\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n\n  overflow: hidden;\n`;\n\nexport const ItemWrapper = styled.div`\n  padding-bottom: 20px;\n  margin-top: 20px;\n  display: flex;\n  gap: 30px;\n\n  border-bottom: 1px solid black;\n`;\n\nexport const Btn = styled.button`\n  padding: 8px;\n  display: flex;\n  gap: 5px;\n  align-items: center;\n  background-color: transparent;\n  border: none;\n  outline: none;\n  cursor: pointer;\n\n  transition: transform 250ms ease-in-out, color 250ms ease-in-out;\n  &:hover,\n  &:focus {\n    transform: scale(1.1);\n    color: orangered;\n  }\n`;\n\nexport const AdditionInfoWrapper = styled.div`\n  padding-bottom: 20px;\n  margin-top: 20px;\n  display: flex;\n  gap: 20px;\n\n  border-bottom: 1px solid black;\n`;\n\nexport const Link = styled(NavLink)`\n  padding: 8px 16px;\n  border-radius: 4px;\n  text-decoration: none;\n  color: black;\n  font-weight: 500;\n\n  &.active {\n    color: white;\n    background-color: orangered;\n  }\n`;\n","import Loader from 'components/Loader/Loader';\nimport {\n  ImgWrapper,\n  InfoWrapper,\n  ItemWrapper,\n  Btn,\n  AdditionInfoWrapper,\n  Link,\n} from './MovieDetails.styled';\nimport { useEffect, useState, Suspense } from 'react';\nimport { Outlet, useLocation, useNavigate, useParams } from 'react-router-dom';\nimport {movieAPI} from 'components/services/moviesApi';\nimport { BiArrowBack } from 'react-icons/bi';\nimport defaultImg from '../../images/movie-pic.jpg';\nimport type {\n  IFilmDetails,\n} from \"types/movieTypes\";\n\nconst BASE_IMG_URL = 'https://image.tmdb.org/t/p/w500';\n\n\nfunction MovieDetails() {\n  const [movie, setMovie] = useState<IFilmDetails | null>(null);\n  const location = useLocation();\n  const navigate = useNavigate();\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const abortConroller = new AbortController();\n    if (!movieId) {\n      return;\n    }\n    movieAPI.getMoviesDetailsById(movieId, abortConroller).then(setMovie);\n\n    return () => {\n      abortConroller.abort();\n    };\n  }, [movieId]);\n\n  if (!movie) {\n    return <Loader />;\n  }\n\n  const handleGoBack = () => {\n    navigate(location?.state?.from ?? '/');\n  };\n\n  const {\n    poster_path,\n    genres,\n    title,\n    original_title,\n    overview,\n    release_date,\n    vote_average,\n  } = movie;\n\n  const imgUrl = BASE_IMG_URL + poster_path;\n  const genresToShow = genres.map(genre => genre.name).join(', ');\n\n  return (\n    <div>\n      <Btn type=\"button\" onClick={handleGoBack}>\n        <BiArrowBack size=\"1.5em\" />\n        Go back\n      </Btn>\n      <ItemWrapper>\n        <ImgWrapper>\n          <img src={poster_path ? imgUrl : defaultImg} alt={title} />\n        </ImgWrapper>\n        <InfoWrapper>\n          <h2>\n            {title ?? original_title} ({Number.parseInt(release_date)})\n          </h2>\n          <p>User score: {Math.round(vote_average * 10)}%</p>\n          <h3>Overview</h3>\n          <p>{overview}</p>\n          <h4>Genres</h4>\n          <p>{genresToShow} </p>\n        </InfoWrapper>\n      </ItemWrapper>\n      <AdditionInfoWrapper>\n        <Link to=\"cast\" state={{ from: location?.state?.from ?? '/' }}>\n          Cast\n        </Link>\n        <Link to=\"reviews\" state={{ from: location?.state?.from ?? '/' }}>\n          Reviews\n        </Link>\n      </AdditionInfoWrapper>\n      <Suspense fallback={<Loader />}>\n        <Outlet />\n      </Suspense>\n    </div>\n  );\n}\n\nexport default MovieDetails;\n"],"names":["agent","axios","create","baseURL","params","api_key","MovieAPI","_classCallCheck","_createClass","key","value","_getTrendingMovies","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_movies$data","movies","wrap","_context","prev","next","get","language","sent","status","Error","abrupt","data","results","t0","toast","error","console","stop","apply","arguments","_getMoviesByQuery","_callee2","query","controller","_movies$data2","_context2","signal","_x","_x2","_getMoviesDetailsById","_callee3","id","movie","_context3","concat","_x3","_x4","_getMovieCast","_callee4","_actors$data","actors","_context4","cast","_x5","_x6","_getMovieReviews","_callee5","_reviews$data","reviews","_context5","_x7","_x8","movieAPI","ImgWrapper","styled","div","_templateObject","_taggedTemplateLiteral","InfoWrapper","_templateObject2","ItemWrapper","_templateObject3","Btn","button","_templateObject4","AdditionInfoWrapper","_templateObject5","Link","NavLink","_templateObject6","_location$state$from2","_location$state2","_location$state$from3","_location$state3","_useState","useState","_useState2","_slicedToArray","setMovie","location","useLocation","navigate","useNavigate","movieId","useParams","useEffect","abortConroller","AbortController","getMoviesDetailsById","then","abort","_jsx","Loader","poster_path","genres","title","original_title","overview","release_date","vote_average","imgUrl","genresToShow","map","genre","name","join","_jsxs","children","type","onClick","_location$state$from","_location$state","state","from","BiArrowBack","size","src","defaultImg","alt","Number","parseInt","Math","round","to","Suspense","fallback","Outlet"],"sourceRoot":""}