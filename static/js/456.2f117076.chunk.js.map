{"version":3,"file":"static/js/456.2f117076.chunk.js","mappings":"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","sources":["components/Cast/Cast.styled.tsx","components/Cast/Cast.tsx","components/services/moviesApi.ts"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  padding-bottom: 20px;\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n\n  border-bottom: 1px solid black;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport {movieAPI} from 'components/services/moviesApi';\nimport { List } from './Cast.styled';\nimport type {\n  ICastInfo,\n} from \"types/movieTypes\";\n\nconst BASE_IMG_URL = 'https://image.tmdb.org/t/p/w500';\n\nfunction Cast() {\n  const [cast, setCast] = useState<ICastInfo[] | []>([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const abortConroller = new AbortController();\n     if (movieId) {\n      movieAPI.getMovieCast(movieId, abortConroller).then(setCast);\n    }\n  \n    return () => {\n      abortConroller.abort();\n    };\n  }, [movieId]);\n\n  return (\n    <div>\n      <List>\n        {cast.map(cast => (\n          <li key={cast.cast_id}>\n            <img\n              width={250}\n              src={BASE_IMG_URL + cast.profile_path}\n              alt={cast.original_name}\n            />\n            <p>{cast.original_name}</p>\n          </li>\n        ))}\n      </List>\n    </div>\n  );\n}\n\nexport default Cast;\n","import axios from 'axios';\nimport toast from 'react-hot-toast';\n\n// #API_KEY = 'd03712107dcdd723f1173c5ee2c0d8c1';\n\nconst agent = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: { api_key: 'd03712107dcdd723f1173c5ee2c0d8c1' },\n});\n\nclass MovieAPI {\n  public async getTrendingMovies() {\n    try {\n      const movies = await agent.get('trending/movie/day', {\n        params: {\n          language: 'en-US',\n        },\n      });\n      if (movies.status === 204) {\n        throw new Error('no movies');\n      }\n      return movies?.data?.results;\n    } catch (error) {\n      toast.error('Something went wrong ðŸ˜¥!');\n      console.error(error);\n    }\n  }\n\n  public async getMoviesByQuery(query: string, controller: AbortController) {\n    try {\n      const movies = await agent.get('search/movie', {\n        params: {\n          query,\n          signal: controller.signal,\n        },\n      });\n\n      return movies?.data?.results;\n    } catch (error) {\n      toast.error('Something went wrong ðŸ˜¥!');\n      console.error(error);\n    }\n  }\n\n  public async getMoviesDetailsById(id: string, controller: AbortController) {\n    try {\n      const movie = await agent.get(`movie/${id}`, {\n        params: {\n          signal: controller.signal,\n        },\n      });\n\n      return movie?.data;\n    } catch (error) {\n      toast.error('Something went wrong ðŸ˜¥!');\n      console.error(error);\n    }\n  }\n\n  public async getMovieCast(id: string, controller: AbortController) {\n    try {\n      const actors = await agent.get(`movie/${id}/credits`, {\n        params: {\n          signal: controller.signal,\n        },\n      });\n\n      return actors?.data?.cast;\n    } catch (error) {\n      toast.error('Something went wrong ðŸ˜¥!');\n      console.error(error);\n    }\n  }\n\n  public async getMovieReviews(id: string, controller: AbortController) {\n    try {\n      const reviews = await agent.get(`movie/${id}/reviews`, {\n        params: {\n          signal: controller.signal,\n        },\n      });\n\n      return reviews?.data?.results;\n    } catch (error) {\n      toast.error('Something went wrong ðŸ˜¥!');\n      console.error(error);\n    }\n  }\n}\n\nconst movieAPI = new MovieAPI();\n\nexport { movieAPI };\n"],"names":["List","styled","ul","_templateObject","_taggedTemplateLiteral","_useState","useState","_useState2","_slicedToArray","cast","setCast","movieId","useParams","useEffect","abortConroller","AbortController","movieAPI","getMovieCast","then","abort","_jsx","children","map","_jsxs","width","src","profile_path","alt","original_name","cast_id","agent","axios","create","baseURL","params","api_key","MovieAPI","_classCallCheck","_createClass","key","value","_getTrendingMovies","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_movies$data","movies","wrap","_context","prev","next","get","language","sent","status","Error","abrupt","data","results","t0","toast","error","console","stop","apply","arguments","_getMoviesByQuery","_callee2","query","controller","_movies$data2","_context2","signal","_x","_x2","_getMoviesDetailsById","_callee3","id","movie","_context3","concat","_x3","_x4","_getMovieCast","_callee4","_actors$data","actors","_context4","_x5","_x6","_getMovieReviews","_callee5","_reviews$data","reviews","_context5","_x7","_x8"],"sourceRoot":""}